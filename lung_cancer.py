# -*- coding: utf-8 -*-
"""lung_cancer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oEbViBp_BCbqEtK78wc4fDKmZu9EgBCB
"""

# Install dependencies as needed:
# pip install kagglehub[pandas-datasets]
import kagglehub
from kagglehub import KaggleDatasetAdapter

# Set the path to the file you'd like to load
# Based on the previous output, the correct file name is 'survey lung cancer.csv'
file_path = "survey lung cancer.csv"

# Load the latest version using dataset_load as recommended
df = kagglehub.dataset_load(
  KaggleDatasetAdapter.PANDAS,
  "mysarahmadbhat/lung-cancer",
  file_path,
)

print("records:", df.to_string())

import os

# List files in the dataset directory
dataset_directory = '/kaggle/input/lung-cancer'
if os.path.exists(dataset_directory):
    print("Files in the dataset directory:", os.listdir(dataset_directory))
else:
    print(f"Directory not found: {dataset_directory}")

# Define the list of condition columns
condition_cols = ['SMOKING', 'YELLOW_FINGERS', 'ANXIETY', 'PEER_PRESSURE', 'CHRONIC DISEASE', 'FATIGUE ', 'ALLERGY ', 'WHEEZING', 'ALCOHOL CONSUMING', 'COUGHING', 'SHORTNESS OF BREATH', 'SWALLOWING DIFFICULTY', 'CHEST PAIN']

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Create age groups
bins = [20, 30, 40, 50, 60, 70, 80]
labels = ['20-29', '30-39', '40-49', '50-59', '60-69', '70-79']
df['Age_Group'] = pd.cut(df['AGE'], bins=bins, labels=labels, right=False)

# Filter data for lung cancer patients
df_lung_cancer_filtered = df[df['LUNG_CANCER'] == 'YES'].copy()

for condition in condition_cols:
    grouped_data = df_lung_cancer_filtered.groupby(['Age_Group', 'GENDER', condition], observed=False).size().reset_index(name='Count')
    plt.figure(figsize=(12, 7))
    sns.barplot(data=grouped_data, x='Age_Group', y='Count', hue='GENDER', palette={'M': 'blue', 'F': 'pink'})
    plt.title(f'Age Group vs. Count for {condition} by Gender (Lung Cancer Patients)')
    plt.xlabel('Age Group')
    plt.ylabel('Number of Individuals')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()